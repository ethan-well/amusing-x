// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plutoservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AmusingxPlutoServiceClient is the client API for AmusingxPlutoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmusingxPlutoServiceClient interface {
	Pong(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*PongResponse, error)
	InventoryCacheInit(ctx context.Context, in *InventoryCacheInitRequest, opts ...grpc.CallOption) (*InventoryCacheInitResponse, error)
	InventoryQuery(ctx context.Context, in *InventoryQueryRequest, opts ...grpc.CallOption) (*InventoryQueryResponse, error)
	InventoryLock(ctx context.Context, in *InventoryLockRequest, opts ...grpc.CallOption) (*InventoryLockResponse, error)
	InventoryUnlock(ctx context.Context, in *InventoryUnlockRequest, opts ...grpc.CallOption) (*InventoryUnlockResponse, error)
}

type amusingxPlutoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAmusingxPlutoServiceClient(cc grpc.ClientConnInterface) AmusingxPlutoServiceClient {
	return &amusingxPlutoServiceClient{cc}
}

func (c *amusingxPlutoServiceClient) Pong(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/plutoservice.AmusingxPlutoService/Pong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxPlutoServiceClient) InventoryCacheInit(ctx context.Context, in *InventoryCacheInitRequest, opts ...grpc.CallOption) (*InventoryCacheInitResponse, error) {
	out := new(InventoryCacheInitResponse)
	err := c.cc.Invoke(ctx, "/plutoservice.AmusingxPlutoService/InventoryCacheInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxPlutoServiceClient) InventoryQuery(ctx context.Context, in *InventoryQueryRequest, opts ...grpc.CallOption) (*InventoryQueryResponse, error) {
	out := new(InventoryQueryResponse)
	err := c.cc.Invoke(ctx, "/plutoservice.AmusingxPlutoService/InventoryQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxPlutoServiceClient) InventoryLock(ctx context.Context, in *InventoryLockRequest, opts ...grpc.CallOption) (*InventoryLockResponse, error) {
	out := new(InventoryLockResponse)
	err := c.cc.Invoke(ctx, "/plutoservice.AmusingxPlutoService/InventoryLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxPlutoServiceClient) InventoryUnlock(ctx context.Context, in *InventoryUnlockRequest, opts ...grpc.CallOption) (*InventoryUnlockResponse, error) {
	out := new(InventoryUnlockResponse)
	err := c.cc.Invoke(ctx, "/plutoservice.AmusingxPlutoService/InventoryUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmusingxPlutoServiceServer is the server API for AmusingxPlutoService service.
// All implementations must embed UnimplementedAmusingxPlutoServiceServer
// for forward compatibility
type AmusingxPlutoServiceServer interface {
	Pong(context.Context, *BlankParams) (*PongResponse, error)
	InventoryCacheInit(context.Context, *InventoryCacheInitRequest) (*InventoryCacheInitResponse, error)
	InventoryQuery(context.Context, *InventoryQueryRequest) (*InventoryQueryResponse, error)
	InventoryLock(context.Context, *InventoryLockRequest) (*InventoryLockResponse, error)
	InventoryUnlock(context.Context, *InventoryUnlockRequest) (*InventoryUnlockResponse, error)
	mustEmbedUnimplementedAmusingxPlutoServiceServer()
}

// UnimplementedAmusingxPlutoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAmusingxPlutoServiceServer struct {
}

func (*UnimplementedAmusingxPlutoServiceServer) Pong(context.Context, *BlankParams) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pong not implemented")
}
func (*UnimplementedAmusingxPlutoServiceServer) InventoryCacheInit(context.Context, *InventoryCacheInitRequest) (*InventoryCacheInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InventoryCacheInit not implemented")
}
func (*UnimplementedAmusingxPlutoServiceServer) InventoryQuery(context.Context, *InventoryQueryRequest) (*InventoryQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InventoryQuery not implemented")
}
func (*UnimplementedAmusingxPlutoServiceServer) InventoryLock(context.Context, *InventoryLockRequest) (*InventoryLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InventoryLock not implemented")
}
func (*UnimplementedAmusingxPlutoServiceServer) InventoryUnlock(context.Context, *InventoryUnlockRequest) (*InventoryUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InventoryUnlock not implemented")
}
func (*UnimplementedAmusingxPlutoServiceServer) mustEmbedUnimplementedAmusingxPlutoServiceServer() {}

func RegisterAmusingxPlutoServiceServer(s *grpc.Server, srv AmusingxPlutoServiceServer) {
	s.RegisterService(&_AmusingxPlutoService_serviceDesc, srv)
}

func _AmusingxPlutoService_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxPlutoServiceServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plutoservice.AmusingxPlutoService/Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxPlutoServiceServer).Pong(ctx, req.(*BlankParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxPlutoService_InventoryCacheInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryCacheInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxPlutoServiceServer).InventoryCacheInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plutoservice.AmusingxPlutoService/InventoryCacheInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxPlutoServiceServer).InventoryCacheInit(ctx, req.(*InventoryCacheInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxPlutoService_InventoryQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxPlutoServiceServer).InventoryQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plutoservice.AmusingxPlutoService/InventoryQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxPlutoServiceServer).InventoryQuery(ctx, req.(*InventoryQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxPlutoService_InventoryLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxPlutoServiceServer).InventoryLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plutoservice.AmusingxPlutoService/InventoryLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxPlutoServiceServer).InventoryLock(ctx, req.(*InventoryLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxPlutoService_InventoryUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxPlutoServiceServer).InventoryUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plutoservice.AmusingxPlutoService/InventoryUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxPlutoServiceServer).InventoryUnlock(ctx, req.(*InventoryUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AmusingxPlutoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plutoservice.AmusingxPlutoService",
	HandlerType: (*AmusingxPlutoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pong",
			Handler:    _AmusingxPlutoService_Pong_Handler,
		},
		{
			MethodName: "InventoryCacheInit",
			Handler:    _AmusingxPlutoService_InventoryCacheInit_Handler,
		},
		{
			MethodName: "InventoryQuery",
			Handler:    _AmusingxPlutoService_InventoryQuery_Handler,
		},
		{
			MethodName: "InventoryLock",
			Handler:    _AmusingxPlutoService_InventoryLock_Handler,
		},
		{
			MethodName: "InventoryUnlock",
			Handler:    _AmusingxPlutoService_InventoryUnlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluto/proto/service.proto",
}
