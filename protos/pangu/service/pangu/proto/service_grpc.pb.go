// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	response "amusingx.fit/amusingx/protos/comm/response"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PanGuServiceClient is the client API for PanGuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PanGuServiceClient interface {
	Pong(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*PongResponse, error)
	CategoryCreate(ctx context.Context, in *CategoryCreateRequest, opts ...grpc.CallOption) (*CategoryCreateResponse, error)
	CategoriesDelete(ctx context.Context, in *CategoriesDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	Category(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	CategoryList(ctx context.Context, in *CategoryListRequest, opts ...grpc.CallOption) (*CategoryListResponse, error)
	CategoryDelete(ctx context.Context, in *CategoryDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	CategoryUpdate(ctx context.Context, in *CategoryUpdateRequest, opts ...grpc.CallOption) (*CategoryUpdateResponse, error)
	OauthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*OAuthLoginResponse, error)
	OauthProviderInfo(ctx context.Context, in *OauthProviderInfoRequest, opts ...grpc.CallOption) (*OAuthProviderInfoResponse, error)
	Logout(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*LogoutResponse, error)
	ProductCreate(ctx context.Context, in *ProductCreateRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	Product(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	Products(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	ProductDelete(ctx context.Context, in *ProductDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	ProductsDelete(ctx context.Context, in *ProductsDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	ProductUpdate(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	SubProductCreate(ctx context.Context, in *SubProductCreateRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	SubProduct(ctx context.Context, in *SubProductRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	SubProducts(ctx context.Context, in *SubProductListRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	SubProductDelete(ctx context.Context, in *SubProductDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	SubProductsDelete(ctx context.Context, in *SubProductsDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	SubProductUpdate(ctx context.Context, in *SubProductUpdateRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributeCreate(ctx context.Context, in *AttributeCreateRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	Attribute(ctx context.Context, in *AttributeRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	Attributes(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributeDelete(ctx context.Context, in *AttributeDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributesDelete(ctx context.Context, in *AttributesDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributeUpdate(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributeMappingCreate(ctx context.Context, in *AttributeMappingCreateRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributeMapping(ctx context.Context, in *AttributeMappingRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributeMappings(ctx context.Context, in *AttributeMappingListRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributeMappingDelete(ctx context.Context, in *AttributeMappingDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributeMappingsDelete(ctx context.Context, in *AttributeMappingsDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
	AttributeMappingUpdate(ctx context.Context, in *AttributeMappingUpdateRequest, opts ...grpc.CallOption) (*response.CommResponse, error)
}

type panGuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPanGuServiceClient(cc grpc.ClientConnInterface) PanGuServiceClient {
	return &panGuServiceClient{cc}
}

func (c *panGuServiceClient) Pong(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/Pong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) CategoryCreate(ctx context.Context, in *CategoryCreateRequest, opts ...grpc.CallOption) (*CategoryCreateResponse, error) {
	out := new(CategoryCreateResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/CategoryCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) CategoriesDelete(ctx context.Context, in *CategoriesDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/CategoriesDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) Category(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/Category", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) CategoryList(ctx context.Context, in *CategoryListRequest, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	out := new(CategoryListResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/CategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) CategoryDelete(ctx context.Context, in *CategoryDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/CategoryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) CategoryUpdate(ctx context.Context, in *CategoryUpdateRequest, opts ...grpc.CallOption) (*CategoryUpdateResponse, error) {
	out := new(CategoryUpdateResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/CategoryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) OauthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*OAuthLoginResponse, error) {
	out := new(OAuthLoginResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/OauthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) OauthProviderInfo(ctx context.Context, in *OauthProviderInfoRequest, opts ...grpc.CallOption) (*OAuthProviderInfoResponse, error) {
	out := new(OAuthProviderInfoResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/OauthProviderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) Logout(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) ProductCreate(ctx context.Context, in *ProductCreateRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/ProductCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) Product(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/Product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) Products(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/Products", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) ProductDelete(ctx context.Context, in *ProductDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/ProductDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) ProductsDelete(ctx context.Context, in *ProductsDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/ProductsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) ProductUpdate(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/ProductUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) SubProductCreate(ctx context.Context, in *SubProductCreateRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/SubProductCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) SubProduct(ctx context.Context, in *SubProductRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/SubProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) SubProducts(ctx context.Context, in *SubProductListRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/SubProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) SubProductDelete(ctx context.Context, in *SubProductDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/SubProductDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) SubProductsDelete(ctx context.Context, in *SubProductsDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/SubProductsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) SubProductUpdate(ctx context.Context, in *SubProductUpdateRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/SubProductUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributeCreate(ctx context.Context, in *AttributeCreateRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) Attribute(ctx context.Context, in *AttributeRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/Attribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) Attributes(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/Attributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributeDelete(ctx context.Context, in *AttributeDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributesDelete(ctx context.Context, in *AttributesDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributesDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributeUpdate(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributeMappingCreate(ctx context.Context, in *AttributeMappingCreateRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributeMappingCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributeMapping(ctx context.Context, in *AttributeMappingRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributeMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributeMappings(ctx context.Context, in *AttributeMappingListRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributeMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributeMappingDelete(ctx context.Context, in *AttributeMappingDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributeMappingDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributeMappingsDelete(ctx context.Context, in *AttributeMappingsDeleteRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributeMappingsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panGuServiceClient) AttributeMappingUpdate(ctx context.Context, in *AttributeMappingUpdateRequest, opts ...grpc.CallOption) (*response.CommResponse, error) {
	out := new(response.CommResponse)
	err := c.cc.Invoke(ctx, "/panguservice.PanGuService/AttributeMappingUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PanGuServiceServer is the server API for PanGuService service.
// All implementations must embed UnimplementedPanGuServiceServer
// for forward compatibility
type PanGuServiceServer interface {
	Pong(context.Context, *BlankParams) (*PongResponse, error)
	CategoryCreate(context.Context, *CategoryCreateRequest) (*CategoryCreateResponse, error)
	CategoriesDelete(context.Context, *CategoriesDeleteRequest) (*response.CommResponse, error)
	Category(context.Context, *CategoryRequest) (*CategoryResponse, error)
	CategoryList(context.Context, *CategoryListRequest) (*CategoryListResponse, error)
	CategoryDelete(context.Context, *CategoryDeleteRequest) (*response.CommResponse, error)
	CategoryUpdate(context.Context, *CategoryUpdateRequest) (*CategoryUpdateResponse, error)
	OauthLogin(context.Context, *OAuthLoginRequest) (*OAuthLoginResponse, error)
	OauthProviderInfo(context.Context, *OauthProviderInfoRequest) (*OAuthProviderInfoResponse, error)
	Logout(context.Context, *BlankParams) (*LogoutResponse, error)
	ProductCreate(context.Context, *ProductCreateRequest) (*response.CommResponse, error)
	Product(context.Context, *ProductRequest) (*response.CommResponse, error)
	Products(context.Context, *ProductListRequest) (*response.CommResponse, error)
	ProductDelete(context.Context, *ProductDeleteRequest) (*response.CommResponse, error)
	ProductsDelete(context.Context, *ProductsDeleteRequest) (*response.CommResponse, error)
	ProductUpdate(context.Context, *ProductUpdateRequest) (*response.CommResponse, error)
	SubProductCreate(context.Context, *SubProductCreateRequest) (*response.CommResponse, error)
	SubProduct(context.Context, *SubProductRequest) (*response.CommResponse, error)
	SubProducts(context.Context, *SubProductListRequest) (*response.CommResponse, error)
	SubProductDelete(context.Context, *SubProductDeleteRequest) (*response.CommResponse, error)
	SubProductsDelete(context.Context, *SubProductsDeleteRequest) (*response.CommResponse, error)
	SubProductUpdate(context.Context, *SubProductUpdateRequest) (*response.CommResponse, error)
	AttributeCreate(context.Context, *AttributeCreateRequest) (*response.CommResponse, error)
	Attribute(context.Context, *AttributeRequest) (*response.CommResponse, error)
	Attributes(context.Context, *AttributeListRequest) (*response.CommResponse, error)
	AttributeDelete(context.Context, *AttributeDeleteRequest) (*response.CommResponse, error)
	AttributesDelete(context.Context, *AttributesDeleteRequest) (*response.CommResponse, error)
	AttributeUpdate(context.Context, *AttributeUpdateRequest) (*response.CommResponse, error)
	AttributeMappingCreate(context.Context, *AttributeMappingCreateRequest) (*response.CommResponse, error)
	AttributeMapping(context.Context, *AttributeMappingRequest) (*response.CommResponse, error)
	AttributeMappings(context.Context, *AttributeMappingListRequest) (*response.CommResponse, error)
	AttributeMappingDelete(context.Context, *AttributeMappingDeleteRequest) (*response.CommResponse, error)
	AttributeMappingsDelete(context.Context, *AttributeMappingsDeleteRequest) (*response.CommResponse, error)
	AttributeMappingUpdate(context.Context, *AttributeMappingUpdateRequest) (*response.CommResponse, error)
	mustEmbedUnimplementedPanGuServiceServer()
}

// UnimplementedPanGuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPanGuServiceServer struct {
}

func (*UnimplementedPanGuServiceServer) Pong(context.Context, *BlankParams) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pong not implemented")
}
func (*UnimplementedPanGuServiceServer) CategoryCreate(context.Context, *CategoryCreateRequest) (*CategoryCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryCreate not implemented")
}
func (*UnimplementedPanGuServiceServer) CategoriesDelete(context.Context, *CategoriesDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoriesDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) Category(context.Context, *CategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category not implemented")
}
func (*UnimplementedPanGuServiceServer) CategoryList(context.Context, *CategoryListRequest) (*CategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryList not implemented")
}
func (*UnimplementedPanGuServiceServer) CategoryDelete(context.Context, *CategoryDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) CategoryUpdate(context.Context, *CategoryUpdateRequest) (*CategoryUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryUpdate not implemented")
}
func (*UnimplementedPanGuServiceServer) OauthLogin(context.Context, *OAuthLoginRequest) (*OAuthLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (*UnimplementedPanGuServiceServer) OauthProviderInfo(context.Context, *OauthProviderInfoRequest) (*OAuthProviderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthProviderInfo not implemented")
}
func (*UnimplementedPanGuServiceServer) Logout(context.Context, *BlankParams) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedPanGuServiceServer) ProductCreate(context.Context, *ProductCreateRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCreate not implemented")
}
func (*UnimplementedPanGuServiceServer) Product(context.Context, *ProductRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Product not implemented")
}
func (*UnimplementedPanGuServiceServer) Products(context.Context, *ProductListRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Products not implemented")
}
func (*UnimplementedPanGuServiceServer) ProductDelete(context.Context, *ProductDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) ProductsDelete(context.Context, *ProductsDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductsDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) ProductUpdate(context.Context, *ProductUpdateRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (*UnimplementedPanGuServiceServer) SubProductCreate(context.Context, *SubProductCreateRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubProductCreate not implemented")
}
func (*UnimplementedPanGuServiceServer) SubProduct(context.Context, *SubProductRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubProduct not implemented")
}
func (*UnimplementedPanGuServiceServer) SubProducts(context.Context, *SubProductListRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubProducts not implemented")
}
func (*UnimplementedPanGuServiceServer) SubProductDelete(context.Context, *SubProductDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubProductDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) SubProductsDelete(context.Context, *SubProductsDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubProductsDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) SubProductUpdate(context.Context, *SubProductUpdateRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubProductUpdate not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributeCreate(context.Context, *AttributeCreateRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeCreate not implemented")
}
func (*UnimplementedPanGuServiceServer) Attribute(context.Context, *AttributeRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attribute not implemented")
}
func (*UnimplementedPanGuServiceServer) Attributes(context.Context, *AttributeListRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attributes not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributeDelete(context.Context, *AttributeDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributesDelete(context.Context, *AttributesDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributesDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributeUpdate(context.Context, *AttributeUpdateRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeUpdate not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributeMappingCreate(context.Context, *AttributeMappingCreateRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeMappingCreate not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributeMapping(context.Context, *AttributeMappingRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeMapping not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributeMappings(context.Context, *AttributeMappingListRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeMappings not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributeMappingDelete(context.Context, *AttributeMappingDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeMappingDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributeMappingsDelete(context.Context, *AttributeMappingsDeleteRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeMappingsDelete not implemented")
}
func (*UnimplementedPanGuServiceServer) AttributeMappingUpdate(context.Context, *AttributeMappingUpdateRequest) (*response.CommResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeMappingUpdate not implemented")
}
func (*UnimplementedPanGuServiceServer) mustEmbedUnimplementedPanGuServiceServer() {}

func RegisterPanGuServiceServer(s *grpc.Server, srv PanGuServiceServer) {
	s.RegisterService(&_PanGuService_serviceDesc, srv)
}

func _PanGuService_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).Pong(ctx, req.(*BlankParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_CategoryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).CategoryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/CategoryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).CategoryCreate(ctx, req.(*CategoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_CategoriesDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).CategoriesDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/CategoriesDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).CategoriesDelete(ctx, req.(*CategoriesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_Category_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).Category(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/Category",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).Category(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_CategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).CategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/CategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).CategoryList(ctx, req.(*CategoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_CategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).CategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/CategoryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).CategoryDelete(ctx, req.(*CategoryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_CategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).CategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/CategoryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).CategoryUpdate(ctx, req.(*CategoryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/OauthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).OauthLogin(ctx, req.(*OAuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_OauthProviderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).OauthProviderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/OauthProviderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).OauthProviderInfo(ctx, req.(*OauthProviderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).Logout(ctx, req.(*BlankParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_ProductCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).ProductCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/ProductCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).ProductCreate(ctx, req.(*ProductCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_Product_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).Product(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/Product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).Product(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_Products_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).Products(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/Products",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).Products(ctx, req.(*ProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_ProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).ProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/ProductDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).ProductDelete(ctx, req.(*ProductDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_ProductsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).ProductsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/ProductsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).ProductsDelete(ctx, req.(*ProductsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/ProductUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).ProductUpdate(ctx, req.(*ProductUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_SubProductCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubProductCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).SubProductCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/SubProductCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).SubProductCreate(ctx, req.(*SubProductCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_SubProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).SubProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/SubProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).SubProduct(ctx, req.(*SubProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_SubProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).SubProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/SubProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).SubProducts(ctx, req.(*SubProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_SubProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubProductDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).SubProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/SubProductDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).SubProductDelete(ctx, req.(*SubProductDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_SubProductsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubProductsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).SubProductsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/SubProductsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).SubProductsDelete(ctx, req.(*SubProductsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_SubProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubProductUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).SubProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/SubProductUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).SubProductUpdate(ctx, req.(*SubProductUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributeCreate(ctx, req.(*AttributeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_Attribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).Attribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/Attribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).Attribute(ctx, req.(*AttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_Attributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).Attributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/Attributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).Attributes(ctx, req.(*AttributeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributeDelete(ctx, req.(*AttributeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributesDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributesDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributesDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributesDelete(ctx, req.(*AttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributeUpdate(ctx, req.(*AttributeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributeMappingCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeMappingCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributeMappingCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributeMappingCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributeMappingCreate(ctx, req.(*AttributeMappingCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributeMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributeMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributeMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributeMapping(ctx, req.(*AttributeMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributeMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeMappingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributeMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributeMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributeMappings(ctx, req.(*AttributeMappingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributeMappingDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeMappingDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributeMappingDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributeMappingDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributeMappingDelete(ctx, req.(*AttributeMappingDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributeMappingsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeMappingsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributeMappingsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributeMappingsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributeMappingsDelete(ctx, req.(*AttributeMappingsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanGuService_AttributeMappingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeMappingUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanGuServiceServer).AttributeMappingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panguservice.PanGuService/AttributeMappingUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanGuServiceServer).AttributeMappingUpdate(ctx, req.(*AttributeMappingUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PanGuService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panguservice.PanGuService",
	HandlerType: (*PanGuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pong",
			Handler:    _PanGuService_Pong_Handler,
		},
		{
			MethodName: "CategoryCreate",
			Handler:    _PanGuService_CategoryCreate_Handler,
		},
		{
			MethodName: "CategoriesDelete",
			Handler:    _PanGuService_CategoriesDelete_Handler,
		},
		{
			MethodName: "Category",
			Handler:    _PanGuService_Category_Handler,
		},
		{
			MethodName: "CategoryList",
			Handler:    _PanGuService_CategoryList_Handler,
		},
		{
			MethodName: "CategoryDelete",
			Handler:    _PanGuService_CategoryDelete_Handler,
		},
		{
			MethodName: "CategoryUpdate",
			Handler:    _PanGuService_CategoryUpdate_Handler,
		},
		{
			MethodName: "OauthLogin",
			Handler:    _PanGuService_OauthLogin_Handler,
		},
		{
			MethodName: "OauthProviderInfo",
			Handler:    _PanGuService_OauthProviderInfo_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PanGuService_Logout_Handler,
		},
		{
			MethodName: "ProductCreate",
			Handler:    _PanGuService_ProductCreate_Handler,
		},
		{
			MethodName: "Product",
			Handler:    _PanGuService_Product_Handler,
		},
		{
			MethodName: "Products",
			Handler:    _PanGuService_Products_Handler,
		},
		{
			MethodName: "ProductDelete",
			Handler:    _PanGuService_ProductDelete_Handler,
		},
		{
			MethodName: "ProductsDelete",
			Handler:    _PanGuService_ProductsDelete_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _PanGuService_ProductUpdate_Handler,
		},
		{
			MethodName: "SubProductCreate",
			Handler:    _PanGuService_SubProductCreate_Handler,
		},
		{
			MethodName: "SubProduct",
			Handler:    _PanGuService_SubProduct_Handler,
		},
		{
			MethodName: "SubProducts",
			Handler:    _PanGuService_SubProducts_Handler,
		},
		{
			MethodName: "SubProductDelete",
			Handler:    _PanGuService_SubProductDelete_Handler,
		},
		{
			MethodName: "SubProductsDelete",
			Handler:    _PanGuService_SubProductsDelete_Handler,
		},
		{
			MethodName: "SubProductUpdate",
			Handler:    _PanGuService_SubProductUpdate_Handler,
		},
		{
			MethodName: "AttributeCreate",
			Handler:    _PanGuService_AttributeCreate_Handler,
		},
		{
			MethodName: "Attribute",
			Handler:    _PanGuService_Attribute_Handler,
		},
		{
			MethodName: "Attributes",
			Handler:    _PanGuService_Attributes_Handler,
		},
		{
			MethodName: "AttributeDelete",
			Handler:    _PanGuService_AttributeDelete_Handler,
		},
		{
			MethodName: "AttributesDelete",
			Handler:    _PanGuService_AttributesDelete_Handler,
		},
		{
			MethodName: "AttributeUpdate",
			Handler:    _PanGuService_AttributeUpdate_Handler,
		},
		{
			MethodName: "AttributeMappingCreate",
			Handler:    _PanGuService_AttributeMappingCreate_Handler,
		},
		{
			MethodName: "AttributeMapping",
			Handler:    _PanGuService_AttributeMapping_Handler,
		},
		{
			MethodName: "AttributeMappings",
			Handler:    _PanGuService_AttributeMappings_Handler,
		},
		{
			MethodName: "AttributeMappingDelete",
			Handler:    _PanGuService_AttributeMappingDelete_Handler,
		},
		{
			MethodName: "AttributeMappingsDelete",
			Handler:    _PanGuService_AttributeMappingsDelete_Handler,
		},
		{
			MethodName: "AttributeMappingUpdate",
			Handler:    _PanGuService_AttributeMappingUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pangu/proto/service.proto",
}
